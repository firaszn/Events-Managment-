services:
  # 1. Config Server (Premier à démarrer)
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 8888 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 2. Eureka Server (Deuxième)
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 8761 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 3. User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KEYCLOAK_AUTH_SERVER_URL=http://host.docker.internal:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 4. Event Service
  event-service:
    build: ./event-service
    container_name: event-service
    ports:
      - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/eventdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=host.docker.internal:9092
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 5. Invitation Service
  invitation-service:
    build: ./invitation-service
    container_name: invitation-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/invitationdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=host.docker.internal:9092
      - KEYCLOAK_AUTH_SERVER_URL=http://host.docker.internal:8080
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI=http://host.docker.internal:8080/realms/repaskeycloak
      - SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK_SET_URI=http://host.docker.internal:8080/realms/repaskeycloak/protocol/openid-connect/certs
      - LOGGING_LEVEL_COM_EXAMPLE_INVITATIONSERVICE=DEBUG
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=DEBUG
      - LOGGING_LEVEL_ORG_HIBERNATE_SQL=DEBUG
      - LOGGING_LEVEL_ORG_HIBERNATE_TYPE_DESCRIPTOR_SQL_BASICBINDER=TRACE
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 6. Notification Service
  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=host.docker.internal:9092
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 7. API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8093:8093"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - KEYCLOAK_AUTH_SERVER_URL=http://host.docker.internal:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"

#  # 8. Frontend (Angular Application)
#  frontend:
#    build: ./frontend
#    container_name: frontend
#    ports:
#      - "80:80"
#    depends_on:
#      - api-gateway
#    networks:
#      - microservices-network
#    extra_hosts:
#      - "host.docker.internal:host-gateway"

  # 9. Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - microservices-network
    depends_on:
      - config-server
      - eureka-server
      - user-service
      - event-service
      - invitation-service
      - notification-service
      - api-gateway

  # 10. Grafana (Visualisation)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=grafana
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - microservices-network
    depends_on:
      - prometheus

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-network

volumes:
  prometheus_data:
  grafana_data:

networks:
  microservices-network:
    driver: bridge

