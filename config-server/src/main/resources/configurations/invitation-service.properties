spring.application.name=INVITATION-SERVICE

# Port du service
server.port=8083

# Configuration Eureka
eureka.instance.hostname=invitation-service
eureka.client.fetch-registry=true
eureka.client.serviceUrl.defaultZone=http://eureka-server:8761/eureka/
eureka.client.register-with-eureka=true
eureka.instance.prefer-ip-address=true
eureka.instance.instance-id=${spring.application.name}:${server.port}
eureka.instance.appname=${spring.application.name}

# Database Configuration
spring.datasource.url=jdbc:postgresql://host.docker.internal:5432/invitationdb
spring.datasource.username=postgres
spring.datasource.password=postgres
spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2
spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.idle-timeout=300000

# Configuration JPA/Hibernate pour PostgreSQL
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Configuration OAuth2/JWT
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://host.docker.internal:8080/realms/RepasKeycloak
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://host.docker.internal:8080/realms/RepasKeycloak/protocol/openid-connect/certs

# Configuration du token relay
spring.security.oauth2.client.provider.keycloak.issuer-uri=http://host.docker.internal:8080/realms/RepasKeycloak
spring.security.oauth2.client.registration.keycloak.client-id=repas-service
spring.security.oauth2.client.registration.keycloak.client-secret=xELXqoDJ4DRmBxdlQqDn6a9trwNh8Wjq
spring.security.oauth2.client.registration.keycloak.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.keycloak.scope=openid,profile,email,roles

# Configuration Kafka
spring.kafka.bootstrap-servers=kafka:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.properties.spring.json.add.type.headers=false

# Configuration Kafka Consumer
spring.kafka.consumer.group-id=invitation-service-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.auto-offset-reset=earliest
spring.kafka.consumer.enable-auto-commit=true

# Topics Kafka
kafka.topics.invitation-responded=invitation.responded
kafka.topics.invitation-auto-confirm=invitation.auto.confirm
kafka.topics.waitlist-invitation-created=waitlist.invitation.created
kafka.topics.waitlist-redistribution=waitlist.redistribution
kafka.topics.notification-send=notification.send
kafka.topics.waitlist-clear-all=waitlist.clear.all

# Logging pour debug
logging.level.org.springframework.web=DEBUG
logging.level.org.springframework.security=DEBUG
logging.level.com.example.invitationservice=DEBUG
logging.level.org.springframework.kafka=DEBUG
logging.level.org.apache.kafka=INFO
logging.level.feign=DEBUG

# Logging pour debug de la connexion a la base de donnees
logging.level.com.zaxxer.hikari=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE

# Desactiver le verificateur de compatibilite Spring Cloud
spring.cloud.compatibility-verifier.enabled=false

# Autoriser l'ecrasement des beans
spring.main.allow-bean-definition-overriding=true
spring.main.allow-circular-references=false

# Actuator & Prometheus
management.endpoints.web.exposure.include=prometheus,health,info,metrics
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.endpoint.prometheus.enabled=true
management.metrics.export.prometheus.enabled=true
management.endpoints.web.base-path=/actuator
management.endpoints.web.cors.allowed-origins=*
management.endpoints.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS

# Security for Actuator endpoints
management.endpoints.web.exposure.exclude=env,beans
spring.security.ignored=/actuator/**
management.endpoints.security.enabled=false
spring.security.endpoints.web.exposure.include=*
spring.security.endpoints.web.cors.allowed-origins=*

# Permit all access to actuator endpoints
spring.security.oauth2.resourceserver.jwt.enabled=true
spring.security.oauth2.resourceserver.jwt.ignore-paths=/actuator/**,/actuator/prometheus/**
management.endpoints.web.discovery.enabled=true
spring.security.web.ignore=/actuator/**

# Message de bienvenue
welcome.message=Bienvenue dans le Invitation Service!
