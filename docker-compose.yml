services:
  # 1. Config Server (Premier à démarrer)
  config-server:
    build: ./config-server
    container_name: config-server
    ports:
      - "8888:8888"
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 8888 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 2. Eureka Server (Deuxième)
  eureka-server:
    build: ./eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -z localhost 8761 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 3. User Service
  user-service:
    build: ./user-service
    container_name: user-service
    ports:
      - "8084:8084"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/userdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - KEYCLOAK_AUTH_SERVER_URL=http://host.docker.internal:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 4. Event Service
  event-service:
    build: ./event-service
    container_name: event-service
    ports:
      - "8082:8082"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/eventdb
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=host.docker.internal:9092
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 5. Invitation Service
  invitation-service:
    build: ./invitation-service
    container_name: invitation-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/invitationdb
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=host.docker.internal:9092
      - KEYCLOAK_AUTH_SERVER_URL=http://host.docker.internal:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 6. Notification Service
  notification-service:
    build: ./notification-service
    container_name: notification-service
    ports:
      - "8085:8085"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - SPRING_KAFKA_BOOTSTRAP_SERVERS=host.docker.internal:9092
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # 7. API Gateway
  api-gateway:
    build: ./api-gateway
    container_name: api-gateway
    ports:
      - "8093:8093"
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - microservices-network
    environment:
      - SPRING_CONFIG_IMPORT=configserver:http://config-server:8888
      - EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE=http://eureka-server:8761/eureka/
      - KEYCLOAK_AUTH_SERVER_URL=http://host.docker.internal:8080
    extra_hosts:
      - "host.docker.internal:host-gateway"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - microservices-network

networks:
  microservices-network:
    driver: bridge