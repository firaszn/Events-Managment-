@startuml Event Management Class Diagram

!theme plain
skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
}

title Diagramme de Classes - Application d'Organisation d'Événements

' Package User Service
package "User Service" {
    class UserEntity {
        -Long id
        -String username
        -String email
        -String firstName
        -String lastName
        -String role
        -boolean enabled
    }

    class UserController {
        +registerUser()
        +login()
        +getUserProfile()
        +updateProfile()
    }

    class UserService {
        +createUser()
        +updateUser()
        +findByEmail()
        +findById()
    }
}

' Package Event Service
package "Event Service" {
    class EventEntity {
        -Long id
        -String title
        -String description
        -LocalDateTime eventDate
        -String location
        -Integer maxCapacity
        -Boolean waitlistEnabled
    }

    class EventController {
        +createEvent()
        +getAllEvents()
        +getEventById()
        +updateEvent()
        +joinWaitlist()
        +confirmWaitlistSpot()
    }

    class EventService {
        +createEvent()
        +updateEvent()
        +findById()
        +findAll()
    }

    class WaitlistEntry {
        -Long id
        -Long eventId
        -String userEmail
        -Integer position
        -String status
    }

    class WaitlistService {
        +joinWaitlist()
        +leaveWaitlist()
        +confirmWaitlistSpot()
        +getUserPosition()
    }
}

' Package Invitation Service
package "Invitation Service" {
    class InvitationEntity {
        -Long id
        -Long eventId
        -String eventTitle
        -String userEmail
        -String status
        -SeatInfo seatInfo
    }

    class InvitationController {
        +createInvitation()
        +confirmInvitation()
        +cancelInvitation()
        +getInvitationsByEvent()
    }

    class InvitationService {
        +createInvitation()
        +confirmInvitation()
        +findByEventId()
        +findByUserEmail()
    }

    class SeatInfo {
        -Integer row
        -Integer number
    }

    class SeatLockService {
        +lockSeat()
        +releaseSeat()
        +cleanupExpiredLocks()
    }
}

' Package Notification Service
package "Notification Service" {
    class NotificationService {
        +handleInvitationResponse()
        +handleEventReminder()
        +handleWaitlistNotification()
        +sendToDeadLetterQueue()
    }

    class EmailRetryService {
        +sendEmailWithRetry()
        +sendEmailSync()
        +emailRetryFallback()
    }

    class KafkaRetryService {
        +sendMessageWithRetry()
        +sendMessageSync()
        +kafkaRetryFallback()
    }

    class DeadLetterQueueService {
        +handleDeadLetterMessage()
        +attemptReprocessing()
        +getFailureStatistics()
    }
}

' Package Frontend Angular
package "Frontend Angular" {
    class EventListComponent {
        -EventResponse[] events
        -boolean isLoading
        +loadEvents()
        +registerForEvent()
        +joinWaitlist()
        +confirmWaitlistSpot()
    }

    class EventService {
        +getAllEvents()
        +getEventById()
        +createEvent()
        +cancelUserRegistration()
    }

    class WaitlistService {
        +joinWaitlist()
        +leaveWaitlist()
        +confirmWaitlistSpot()
    }

    class AuthService {
        +login()
        +logout()
        +isLoggedIn()
        +getUserProfile()
    }
}

' Package Kafka Messages
package "Kafka Messages" {
    class InvitationNotificationDTO {
        -String eventTitle
        -String userEmail
        -SeatInfo seatInfo
        -LocalDateTime eventDate
    }

    class EventReminderMessage {
        -String eventTitle
        -LocalDateTime eventDateTime
        -String eventLocation
        -List<String> participantEmails
    }

    class WaitlistNotificationMessage {
        -String eventTitle
        -String userEmail
        -Integer position
        -LocalDateTime eventDate
    }
}

' Relations principales
UserController --> UserService
UserService --> UserEntity

EventController --> EventService
EventController --> WaitlistService
EventService --> EventEntity
WaitlistService --> WaitlistEntry

InvitationController --> InvitationService
InvitationController --> SeatLockService
InvitationService --> InvitationEntity
InvitationEntity --> SeatInfo

NotificationService --> EmailRetryService
NotificationService --> KafkaRetryService
NotificationService --> DeadLetterQueueService

EventListComponent --> EventService
EventListComponent --> WaitlistService
EventListComponent --> AuthService

' Relations Kafka
NotificationService --> InvitationNotificationDTO
NotificationService --> EventReminderMessage
NotificationService --> WaitlistNotificationMessage

@enduml
