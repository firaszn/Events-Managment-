@startuml Event Management Sequence Diagram

!theme plain
skinparam sequence {
    ArrowColor DarkBlue
    ActorBorderColor DarkBlue
    LifeLineBorderColor DarkBlue
    ParticipantBorderColor DarkBlue
    ParticipantBackgroundColor LightBlue
}

title Diagramme de Séquence - Flux Liste d'Attente

actor "Utilisateur" as User
participant "Frontend" as Frontend
participant "API Gateway" as Gateway
participant "Event Service" as EventService
participant "Invitation Service" as InvitationService
participant "Notification Service" as NotificationService
participant "Kafka" as Kafka
database "PostgreSQL" as DB

== Rejoindre la Liste d'Attente ==

User -> Frontend: Cliquer sur "Rejoindre la liste d'attente"
Frontend -> Gateway: POST /events/{id}/waitlist/join
Gateway -> EventService: joinWaitlist(eventId, userEmail)

EventService -> DB: Vérifier si l'événement est complet
DB --> EventService: Événement complet

EventService -> DB: Ajouter à la liste d'attente
DB --> EventService: Position assignée (3ème)

EventService --> Gateway: WaitlistResponse(position: 3)
Gateway --> Frontend: Réponse avec position
Frontend --> User: Afficher "Position 3 en liste d'attente"

== Confirmer une Place ==

User -> Frontend: Cliquer sur "Confirmer ma place"
Frontend -> Gateway: POST /events/{id}/waitlist/confirm
Gateway -> EventService: confirmWaitlistSpot(eventId, userEmail)

EventService -> DB: Vérifier la position
DB --> EventService: Position 1 (premier en liste)

EventService -> DB: Supprimer de la liste d'attente
EventService -> DB: Créer l'inscription
DB --> EventService: Inscription créée

EventService -> InvitationService: Créer l'invitation
InvitationService -> DB: Sauvegarder l'invitation
DB --> InvitationService: Invitation créée

InvitationService -> Kafka: Publier message "invitation.responded"
Kafka -> NotificationService: Consommer le message

NotificationService -> NotificationService: Traiter la confirmation
NotificationService -> NotificationService: Envoyer email de confirmation

EventService --> Gateway: Confirmation réussie
Gateway --> Frontend: Réponse de confirmation
Frontend --> User: Afficher "Place confirmée"

== Gestion des Erreurs ==

User -> Frontend: Action qui déclenche une notification
Frontend -> Gateway: Requête
Gateway -> EventService: Traitement
EventService -> Kafka: Publier message

Kafka -> NotificationService: Consommer le message
NotificationService -> NotificationService: sendEmailWithRetry()

alt Email Service indisponible
    NotificationService -> NotificationService: Première tentative échoue
    NotificationService -> NotificationService: Retry automatique
    NotificationService -> NotificationService: Deuxième tentative échoue
    NotificationService -> NotificationService: Retry automatique
    NotificationService -> NotificationService: Troisième tentative échoue
    
    NotificationService -> NotificationService: emailRetryFallback()
    NotificationService -> Kafka: Publier vers Dead Letter Queue
else Email Service disponible après retry
    NotificationService -> NotificationService: Tentative réussie
    NotificationService --> NotificationService: Email envoyé
end

@enduml
