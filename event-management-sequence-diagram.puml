@startuml Event Management - Sequence Diagrams

!theme plain
skinparam backgroundColor #FFFFFF
skinparam participantBackgroundColor #F8F9FA
skinparam participantBorderColor #6C757D

title Application d'Organisation d'Ã‰vÃ©nements - Flux Principaux

actor Organisateur as org
actor Participant as part
participant "API Gateway" as gateway
participant "User Service" as user
participant "Event Service" as event
participant "Invitation Service" as invitation
participant "Notification Service" as notification
participant "Scheduler Service" as scheduler
participant "Kafka" as kafka
participant "Email Service" as email
database "PostgreSQL" as db

== 1. CrÃ©ation d'un Ã‰vÃ©nement ==

org -> gateway : POST /api/events
gateway -> event : POST /events
event -> db : save(EventEntity)
db -> event : EventEntity saved
event -> kafka : publish("event.created", EventEntity)
event -> gateway : EventResponse
gateway -> org : 201 Created

kafka -> notification : consume("event.created")
notification -> user : getUsersByRole(PARTICIPANT)
user -> notification : List<UserEntity>
notification -> email : sendEventCreatedEmail()
email -> part : ðŸ“§ Nouvel Ã©vÃ©nement crÃ©Ã©

== 2. Invitation de Participants ==

org -> gateway : POST /api/invitations
gateway -> invitation : POST /invitations
invitation -> db : save(Invitation)
db -> invitation : Invitation saved
invitation -> kafka : publish("invitation.responded", Invitation)
invitation -> gateway : InvitationResponse
gateway -> org : 201 Created

kafka -> notification : consume("invitation.responded")
notification -> user : getUserById(userId)
user -> notification : UserEntity
notification -> event : getEventById(eventId)
event -> notification : EventEntity
notification -> email : sendInvitationEmail()
email -> part : ðŸ“§ Invitation Ã  l'Ã©vÃ©nement

== 3. RÃ©ponse Ã  une Invitation ==

part -> gateway : PUT /api/invitations/{id}/accept
gateway -> invitation : PUT /invitations/{id}/accept
invitation -> db : updateStatus(ACCEPTED)
db -> invitation : Invitation updated
invitation -> kafka : publish("invitation.responded", Invitation)
invitation -> gateway : InvitationResponse
gateway -> part : 200 OK

kafka -> notification : consume("invitation.responded")
notification -> user : getUserById(organizerId)
user -> notification : UserEntity (organizer)
notification -> email : sendAcceptanceEmail()
email -> org : ðŸ“§ Participant a acceptÃ©

== 4. Modification d'un Ã‰vÃ©nement ==

org -> gateway : PUT /api/events/{id}
gateway -> event : PUT /events/{id}
event -> db : update(EventEntity)
db -> event : EventEntity updated
event -> kafka : publish("event.updated", EventEntity)
event -> gateway : EventResponse
gateway -> org : 200 OK

kafka -> notification : consume("event.updated")
notification -> invitation : getInvitationsByEvent(eventId)
invitation -> notification : List<Invitation>
notification -> user : getUsersByIds(userIds)
user -> notification : List<UserEntity>
notification -> email : sendEventUpdatedEmail()
email -> part : ðŸ“§ Ã‰vÃ©nement modifiÃ©

== 5. Rappel Automatique 24h Avant ==

scheduler -> scheduler : @Scheduled checkUpcomingEvents()
scheduler -> event : getEventsIn24Hours()
event -> scheduler : List<EventEntity>

loop Pour chaque Ã©vÃ©nement
    scheduler -> invitation : getAcceptedInvitations(eventId)
    invitation -> scheduler : List<Invitation>
    scheduler -> user : getUsersByIds(userIds)
    user -> scheduler : List<UserEntity>
    scheduler -> kafka : publish("event.reminder", EventReminderMessage)
end

kafka -> notification : consume("event.reminder")
notification -> email : sendReminderEmail()
email -> part : ðŸ“§ Rappel Ã©vÃ©nement demain
email -> org : ðŸ“§ Rappel Ã©vÃ©nement demain

== 6. Annulation d'un Ã‰vÃ©nement ==

org -> gateway : DELETE /api/events/{id}
gateway -> event : DELETE /events/{id}
event -> invitation : cancelInvitationsByEvent(eventId)
invitation -> db : updateStatus(CANCELLED)
event -> db : delete(EventEntity)
event -> kafka : publish("event.cancelled", EventEntity)
event -> gateway : 204 No Content
gateway -> org : 204 No Content

kafka -> notification : consume("event.cancelled")
notification -> invitation : getInvitationsByEvent(eventId)
invitation -> notification : List<Invitation>
notification -> user : getUsersByIds(userIds)
user -> notification : List<UserEntity>
notification -> email : sendCancellationEmail()
email -> part : ðŸ“§ Ã‰vÃ©nement annulÃ©

@enduml
